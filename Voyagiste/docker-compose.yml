# Ensemble des conteneurs et ressources de la solution Voyagiste

name: "Voyagiste"

# Ce fichier sert a configurer le service 
# d'orchertration des conteneurs de la solution

# Pour simplifier l'accès de l'externe et éviter les conflits, les ports des 
# services API sont mappés sur l'hôte en préfixant un chiffre pour 
# distinguer les services ex.: les ports 443 devienent 1443, 2443, 3443, ...

services:

  # Conteneur du service "CarAPI" du Voyagiste
  # Ce service permet de réserver des voitures
  CarService:
    image: ${DOCKER_REGISTRY-}travel-car
    build:
      context: .
      dockerfile: CarAPI\Dockerfile
    ports:
      #- "1443:443"
      - "180:80"


  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 

  # La configuration du conteneur de votre service va ici
  #
  # Vous pouvez copier CarService et y remplacer "Car" par le 
  # nom de votre service
  #
  # Vous devez ensuite ajouter les mappage de ports différents 
  # pour ne pas avoir de conflit sur l'hôte (utilisez 2443 et 280)

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 



  # Conteneur du service "PackageAPI" du Voyagiste
  # Ce service permet de réserver des 
  # forfaits prédéterminés (typiquement Vol + hotel) 
  # et ajouter des options(voiture, excursion, ...)
  # Les résultats sont des objets composites
  PackageService:
    image: ${DOCKER_REGISTRY-}travel-package
    build:
      context: .
      dockerfile: PackageAPI\Dockerfile
    ports:
      #- "3443:443"
      - "380:80"
    depends_on:
      #- CommonDataService  # Votre service doit être ajouté ici!
      - CarService

# Conteneur de messagerie inter-services 
# https://hub.docker.com/r/eventstore/eventstore/
# https://github.com/EventStore/EventStore-Client-Dotnet
#
# À venir éventuellement, on passe directement par les 
# API pour ce TP au lieu d'isoler les services en répliquant 
# les données